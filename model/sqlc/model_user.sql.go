// Code generated by sqlc. DO NOT EDIT.
// source: model_user.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (fio, username, password, email, phone, code, created)
VALUES ($1, $2, $3, $4, $5, $6, $7 ) returning id, fio, username, password, email, phone, code, created
`

type CreateUserParams struct {
	Fio      string         `json:"fio"`
	Username string         `json:"username"`
	Password string         `json:"password"`
	Email    sql.NullString `json:"email"`
	Phone    sql.NullString `json:"phone"`
	Code     sql.NullString `json:"code"`
	Created  sql.NullTime   `json:"created"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Fio,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Phone,
		arg.Code,
		arg.Created,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fio,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Code,
		&i.Created,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :one
DELETE FROM users where id = $1 returning id, fio, username, password, email, phone, code, created
`

func (q *Queries) DeleteUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fio,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Code,
		&i.Created,
	)
	return i, err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :one
DELETE FROM users WHERE username = $1 returning id, fio, username, password, email, phone, code, created
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fio,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Code,
		&i.Created,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, fio, username, password, email, phone, code, created FROM users LIMIT $1 OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fio,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Phone,
			&i.Code,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, fio, username, password, email, phone, code, created FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fio,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Code,
		&i.Created,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, fio, username, password, email, phone, code, created FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fio,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Code,
		&i.Created,
	)
	return i, err
}

const updateUserInfoById = `-- name: UpdateUserInfoById :one
UPDATE users set email = $1, code = $2, phone = $3, fio = $4 where id = $5 returning id, fio, username, password, email, phone, code, created
`

type UpdateUserInfoByIdParams struct {
	Email sql.NullString `json:"email"`
	Code  sql.NullString `json:"code"`
	Phone sql.NullString `json:"phone"`
	Fio   string         `json:"fio"`
	ID    int64          `json:"id"`
}

func (q *Queries) UpdateUserInfoById(ctx context.Context, arg UpdateUserInfoByIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserInfoById,
		arg.Email,
		arg.Code,
		arg.Phone,
		arg.Fio,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fio,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Code,
		&i.Created,
	)
	return i, err
}

const updateUserPasswordById = `-- name: UpdateUserPasswordById :one
UPDATE users set password = $1 where id = $1 returning id, fio, username, password, email, phone, code, created
`

func (q *Queries) UpdateUserPasswordById(ctx context.Context, password string) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPasswordById, password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fio,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Phone,
		&i.Code,
		&i.Created,
	)
	return i, err
}
