// Code generated by sqlc. DO NOT EDIT.
// source: board.sql

package database

import (
	"context"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (name) VALUES ($1) returning id, name, created_at
`

func (q *Queries) CreateBoard(ctx context.Context, name string) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard, name)
	var i Board
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteBoard = `-- name: DeleteBoard :one
DELETE FROM boards where id = $1 returning id, name, created_at
`

func (q *Queries) DeleteBoard(ctx context.Context, id int64) (Board, error) {
	row := q.db.QueryRowContext(ctx, deleteBoard, id)
	var i Board
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listBoards = `-- name: ListBoards :many
SELECT id, name, created_at FROM boards ORDER BY created_at desc LIMIT $1 OFFSET $2
`

type ListBoardsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBoards(ctx context.Context, arg ListBoardsParams) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, listBoards, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBoard = `-- name: UpdateBoard :one
UPDATE boards set name = $2 where id = $1 returning id, name, created_at
`

type UpdateBoardParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateBoard(ctx context.Context, arg UpdateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, updateBoard, arg.ID, arg.Name)
	var i Board
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
